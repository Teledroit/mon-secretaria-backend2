#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

class QualityChecker {
  constructor() {
    this.errors = [];
    this.warnings = [];
  }

  async runQualityChecks() {
    console.log('üîç D√©marrage des v√©rifications de qualit√©...\n');

    try {
      await this.checkLinting();
      await this.runTests();
      await this.checkCoverage();
      await this.checkBundleSize();
      await this.checkSecurity();
      await this.checkPerformance();

      this.generateReport();
    } catch (error) {
      console.error('‚ùå Erreur lors des v√©rifications:', error);
      process.exit(1);
    }
  }

  async checkLinting() {
    console.log('üìù V√©rification du linting...');
    
    try {
      execSync('npm run lint', { stdio: 'pipe' });
      console.log('‚úÖ Linting: Aucun probl√®me d√©tect√©');
    } catch (error) {
      this.errors.push('Erreurs de linting d√©tect√©es');
      console.log('‚ùå Linting: Erreurs d√©tect√©es');
    }
  }

  async runTests() {
    console.log('üß™ Ex√©cution des tests...');
    
    try {
      const output = execSync('npm run test:coverage', { encoding: 'utf8' });
      console.log('‚úÖ Tests: Tous les tests passent');
      
      // Extraire le pourcentage de couverture
      const coverageMatch = output.match(/All files\s+\|\s+(\d+\.?\d*)/);
      if (coverageMatch) {
        const coverage = parseFloat(coverageMatch[1]);
        if (coverage < 80) {
          this.warnings.push(`Couverture de tests faible: ${coverage}%`);
        }
      }
    } catch (error) {
      this.errors.push('√âchec des tests');
      console.log('‚ùå Tests: √âchecs d√©tect√©s');
    }
  }

  async checkCoverage() {
    console.log('üìä V√©rification de la couverture...');
    
    try {
      const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
      if (fs.existsSync(coveragePath)) {
        const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
        const totalCoverage = coverage.total.lines.pct;
        
        if (totalCoverage >= 80) {
          console.log(`‚úÖ Couverture: ${totalCoverage}% (Excellent)`);
        } else if (totalCoverage >= 60) {
          console.log(`‚ö†Ô∏è Couverture: ${totalCoverage}% (Acceptable)`);
          this.warnings.push(`Couverture de tests: ${totalCoverage}%`);
        } else {
          console.log(`‚ùå Couverture: ${totalCoverage}% (Insuffisant)`);
          this.errors.push(`Couverture de tests insuffisante: ${totalCoverage}%`);
        }
      }
    } catch (error) {
      this.warnings.push('Impossible de v√©rifier la couverture');
    }
  }

  async checkBundleSize() {
    console.log('üì¶ V√©rification de la taille du bundle...');
    
    try {
      execSync('npm run build', { stdio: 'pipe' });
      
      const distPath = path.join(process.cwd(), 'dist');
      if (fs.existsSync(distPath)) {
        const stats = this.getDirectorySize(distPath);
        const sizeMB = stats / (1024 * 1024);
        
        if (sizeMB < 5) {
          console.log(`‚úÖ Bundle: ${sizeMB.toFixed(2)}MB (Optimal)`);
        } else if (sizeMB < 10) {
          console.log(`‚ö†Ô∏è Bundle: ${sizeMB.toFixed(2)}MB (Acceptable)`);
          this.warnings.push(`Taille du bundle: ${sizeMB.toFixed(2)}MB`);
        } else {
          console.log(`‚ùå Bundle: ${sizeMB.toFixed(2)}MB (Trop volumineux)`);
          this.errors.push(`Bundle trop volumineux: ${sizeMB.toFixed(2)}MB`);
        }
      }
    } catch (error) {
      this.warnings.push('Impossible de v√©rifier la taille du bundle');
    }
  }

  async checkSecurity() {
    console.log('üîí V√©rification de s√©curit√©...');
    
    try {
      // V√©rifier les variables d'environnement sensibles
      const envFile = path.join(process.cwd(), '.env');
      if (fs.existsSync(envFile)) {
        const envContent = fs.readFileSync(envFile, 'utf8');
        
        // V√©rifier que les cl√©s API ne sont pas expos√©es
        if (envContent.includes('sk-') || envContent.includes('pk_')) {
          this.warnings.push('Cl√©s API d√©tect√©es dans .env - V√©rifiez la s√©curit√©');
        }
      }

      // V√©rifier les d√©pendances vuln√©rables
      try {
        execSync('npm audit --audit-level=high', { stdio: 'pipe' });
        console.log('‚úÖ S√©curit√©: Aucune vuln√©rabilit√© critique');
      } catch (auditError) {
        this.warnings.push('Vuln√©rabilit√©s d√©tect√©es dans les d√©pendances');
      }

    } catch (error) {
      this.warnings.push('Impossible de v√©rifier la s√©curit√©');
    }
  }

  async checkPerformance() {
    console.log('‚ö° V√©rification des performances...');
    
    try {
      // Analyser les fichiers volumineux
      const srcPath = path.join(process.cwd(), 'src');
      const largeFiles = this.findLargeFiles(srcPath, 200 * 1024); // 200KB
      
      if (largeFiles.length > 0) {
        this.warnings.push(`Fichiers volumineux d√©tect√©s: ${largeFiles.length}`);
        largeFiles.forEach(file => {
          console.log(`‚ö†Ô∏è Fichier volumineux: ${file.path} (${(file.size / 1024).toFixed(1)}KB)`);
        });
      } else {
        console.log('‚úÖ Performance: Taille des fichiers optimale');
      }

    } catch (error) {
      this.warnings.push('Impossible de v√©rifier les performances');
    }
  }

  getDirectorySize(dirPath) {
    let totalSize = 0;
    
    const files = fs.readdirSync(dirPath);
    for (const file of files) {
      const filePath = path.join(dirPath, file);
      const stats = fs.statSync(filePath);
      
      if (stats.isDirectory()) {
        totalSize += this.getDirectorySize(filePath);
      } else {
        totalSize += stats.size;
      }
    }
    
    return totalSize;
  }

  findLargeFiles(dirPath, maxSize) {
    const largeFiles = [];
    
    const scanDirectory = (dir) => {
      const files = fs.readdirSync(dir);
      
      for (const file of files) {
        const filePath = path.join(dir, file);
        const stats = fs.statSync(filePath);
        
        if (stats.isDirectory()) {
          scanDirectory(filePath);
        } else if (stats.size > maxSize) {
          largeFiles.push({
            path: path.relative(process.cwd(), filePath),
            size: stats.size
          });
        }
      }
    };
    
    scanDirectory(dirPath);
    return largeFiles;
  }

  generateReport() {
    console.log('\nüìã RAPPORT DE QUALIT√â');
    console.log('='.repeat(50));
    
    if (this.errors.length === 0 && this.warnings.length === 0) {
      console.log('üéâ Excellente qualit√© ! Aucun probl√®me d√©tect√©.');
    } else {
      if (this.errors.length > 0) {
        console.log('\n‚ùå ERREURS CRITIQUES:');
        this.errors.forEach((error, index) => {
          console.log(`  ${index + 1}. ${error}`);
        });
      }
      
      if (this.warnings.length > 0) {
        console.log('\n‚ö†Ô∏è AVERTISSEMENTS:');
        this.warnings.forEach((warning, index) => {
          console.log(`  ${index + 1}. ${warning}`);
        });
      }
    }

    console.log('\nüìà RECOMMANDATIONS:');
    console.log('  ‚Ä¢ Ex√©cutez les tests r√©guli√®rement');
    console.log('  ‚Ä¢ Maintenez une couverture de tests > 80%');
    console.log('  ‚Ä¢ Surveillez la taille du bundle');
    console.log('  ‚Ä¢ Mettez √† jour les d√©pendances r√©guli√®rement');
    
    console.log('\n' + '='.repeat(50));
    
    // Exit avec code d'erreur si des erreurs critiques
    if (this.errors.length > 0) {
      process.exit(1);
    }
  }
}

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  const checker = new QualityChecker();
  checker.runQualityChecks();
}